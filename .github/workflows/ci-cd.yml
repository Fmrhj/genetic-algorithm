name: Build & Publish Python Package to PyPI

on: push

jobs:
  tests:
    name: Test code
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') != true && endsWith(github.ref, 'master') != true && endsWith(github.ref, 'chore') != true

    env:
      VENV_NAME: .venv
      PYTHON_VERSION: "3.10.12"
      TEST_DIR: tests

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Create and start a Python virtual environment
        run: |
          pip3 install virtualenv
          python3 -m virtualenv ${{ env.VENV_NAME }} --python="python${{ env.PYTHON_VERSION }}"
          source ${{ env.VENV_NAME }}/bin/activate

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install ruff pytest pytest-cov pytest-integration black isort
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements.dev.txt ]; then pip install -r requirements.dev.txt; fi

      - name: Lint with ruff
        run: |
          # This assumes that a ruff.toml or pyproject.toml is included. If not a default configuration is taken
          ruff check .

      #- name: Mypy
      #  run: |
      #    python3 -m pip install mypy
      #    mypy . --exclude ${{ env.VENV_NAME }}

      - name: Black check (PEP style check)
        run: black --check . --exclude ${{ env.VENV_NAME }}

      - name: Sorted imports check
        run: isort --check --profile black .

      - name: Run unit & integration tests and calculate coverage
        run: |
          python3 -m pytest ${{ env.TEST_DIR }} --cov --cov-report xml:coverage.xml --cov-config=.coveragerc

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: true
          fail_below_min: 75
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: "70 80"

      - name: Show coverage report summary
        run: |
          cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Unit tests
        run: >-
          python -m pytest .

  build:
    name: Build distribution ðŸ“¦
    needs:
      - tests
    if: |
      always() &&
      (needs.tests.result == 'success' || needs.tests.result == 'skipped') &&
      startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    env:
      CI_SCRIPTS_DIR: ci
      PACKAGE_VERSION_DIR: ga

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10.12"

      - name: Update __version__.py file
        run: |
          pip install typer
          python ${{ env.CI_SCRIPTS_DIR }}/set_version.py '${{ env.PACKAGE_VERSION_DIR }}' '${{ github.ref_name }}'

      - name: Install pypa/build
        run: >-
          python3 -m pip install build --user

      - name: Build a binary wheel and a source tarball
        run: python3 -m build

      - name: Store the distribution packages
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: dist/

  publish-to-pypi:
    name: Publish Python distribution ðŸ“¦ to PyPI
    needs:
      - build
    if: |
      always() &&
      needs.build.result == 'success' &&
      startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/generic-algorithm-light # Replace <package-name> with your PyPI project name
    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
